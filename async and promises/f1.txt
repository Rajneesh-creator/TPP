Assignment-3 
Compiler Design


Q1.	Differentiate Static allocation, stack allocation and heap allocation strategies. Also mention where each of these strategies is used.		
1. Static Global constants and other data generated by the compiler(e.g. info to support garbage collection) are allocated static storage. Static variables are bound to memory cells before execution begins and remains bound to the same memory     cell throughout execution. E.g., C static variables.
Advantage: efficiency(direct addressing), history-sensitive subprogram support
Disadvantage: lack of flexibility, no recursion if this is the *only* kind of variable, as was the case in Fortran

2. Heap
Data that may outlive the call to the procedure that created it is usually allocated on a heap. E.g. new to create objects that may be passed from procedure to procedure.
The size of heap can not be determined at compile time. Referenced only through pointers or references, e.g., dynamic objects in C++, all objects in Java
Advantage: provides for dynamic storage management
Disadvantage: inefficient and unreliable

3. Stack
Names local to a procedure are allocated space on a stack. The size of stack can not be determined at compile time.
Advantages:
allows recursion
conserves storage
Disadvantages:
Overhead of allocation and deallocation
Subprograms cannot be history sensitive
Inefficient references (indirect addressing)


Q2.	What is activation record? Briefly explain runtime storage activation.
  The execution of a procedure is called its activation. An activation record contains all the necessary information required to call a procedure. An activation record may contain the following units (depending upon the source language used).
Temporaries	Stores temporary and intermediate values of an expression.
Local Data	Stores local data of the called procedure.
Machine Status	Stores machine status such as Registers, Program Counter etc., before the procedure is called.
Control Link	Stores the address of activation record of the caller procedure.
Access Link	Stores the information of data which is outside the local scope.
Actual Parameters	Stores actual parameters, i.e., parameters which are used to send input to the called procedure.
Return Value	Stores return values.
Whenever a procedure is executed, its activation record is stored on the stack, also known as control stack. When a procedure calls another procedure, the execution of the caller is suspended until the called procedure finishes execution. At this time, the activation record of the called procedure is stored on the stack.

Local Data: It holds the data that is local to the execution of the procedure.
Temporaries: It stores the value that arises in the evaluation of an expression.
A program as a source code is merely a collection of text (code, statements etc.) and to make it alive, it requires actions to be performed on the target machine. A program needs memory resources to execute instructions. A program contains names for procedures, identifiers etc., that require mapping with the actual memory location at runtime. By runtime, we mean a program in execution. Runtime environment is a state of the target machine, which may include software libraries, environment variables, etc., to provide services to the processes running in the system. Runtime support system is a package, mostly generated with the executable program itself and facilitates the process communication between the process and the runtime environment. It takes care of memory allocation and de-allocation while the program is being executed.

Q3.	What are the criteria that need to be considered while applying code optimization? Mention the issues involve in designing of code generation?

The code optimization in the synthesis phase is a program transformation technique, which tries to improve the intermediate code by making it consume fewer resources (i.e. CPU, Memory) so that faster-running machine code will result. Compiler optimizing process should meet the following objectives:
•	The optimization must be correct, it must not, in any way, change the meaning of the program.
•	Optimization should increase the speed and performance of the program.
•	The compilation time must be kept reasonable.
•	The optimization process should not delay the overall compiling process.

Optimization of the code is often performed at the end of the development stage since it reduces readability and adds code that is used to increase the performance.

  The following issue arises during the code generation phase:
1.	Input to code generator –
The input to code generator is the intermediate code generated by the front end, along with information in the symbol table that determines the run-time addresses of the data-objects denoted by the names in the intermediate representation. Intermediate codes may be represented mostly in quadruples, triples, indirect triples, Postfix notation, syntax trees, DAG’s, etc. The code generation phase just proceeds on an assumption that the input is free from all of syntactic and state semantic errors, the necessary type checking has taken place and the type-conversion operators have been inserted wherever necessary.
2.	Target program –
The target program is the output of the code generator. The output may be absolute machine language, relocatable machine language, assembly language.
•	Absolute machine language as output has advantages that it can be placed in a fixed memory location and can be immediately executed.
•	Relocatable machine language as an output allows subprograms and subroutines to be compiled separately. Relocatable object modules can be linked together and loaded by linking loader. But there is added expense of linking and loading.
•	Assembly language as output makes the code generation easier. We can generate symbolic instructions and use macro-facilities of assembler in generating code. And we need an additional assembly step after code generation.
3.	Memory Management –
Mapping the names in the source program to the addresses of data objects is done by the front end and the code generator. A name in the three address statements refers to the symbol table entry for name. Then from the symbol table entry, a relative address can be determined for the name.
4.	Instruction selection –
Selecting the best instructions will improve the efficiency of the program. It includes the instructions that should be complete and uniform. Instruction speeds and machine idioms also plays a major role when efficiency is considered. But if we do not care about the efficiency of the target program then instruction selection is straight-forward.
5.	Register allocation issues –
Use of registers make the computations faster in comparison to that of memory, so efficient utilization of registers is important. The use of registers are subdivided into two sub problems:
1.	During Register allocation – we select only those set of variables that will reside in the registers at each point in the program.
2.	During a subsequent Register assignment phase, the specific register is picked to access the variable.
6.	Evaluation order –
The code generator decides the order in which the instruction will be executed. The order of computations affects the efficiency of the target code. Among many computational orders, some will require only fewer registers to hold the intermediate results. However, picking the best order in the general case is a difficult NP-complete problem.
7.	Approaches to code generation issues: Code generator must always generate the correct code. It is essential because of the number of special cases that a code generator might face. Some of the design goals of code generator are:
1.	Correct
2.	Easily maintainable
3.	Testable
4.	Efficient


Q4.	How the data is stored in symbol table for block and non-block structured languages?
Organization for Block Structured Languages:
•	The block structured language is a kind of language in which sections of source code is within some matching pair of delimiters such as “{“and “}” or begin and end
•	Such a section gets executed as one unit or one procedure or a function or it may be controlled by some conditional statements (if, while, do-while)
•	Normally, block structured languages support structured programming approach
                Example: C, C++, JAVA, PASCAL, FORTRAM, LISP and SNOBOL
•	Non-block structured languages are LISP, FORTRAN and SNOBOL
Implementation of Symbol Table:
•	Each entry in the symbol table can be implemented as a record with several fields
•	The following data structures are used for organization of block structured languages:
o	Linear List
o	Self-Organizing List
o	Hashing
o	Tree Structure
    Organization for Block Structured Languages:
•	Each unit of code is a single module that has no sub modules.
•	The complexity of symbol table operation is determined by average length of search, which is average number of comparisons required to retrieve a record.
•	The collection of attributes stored in the table for a given variable is called symbol table record.
•	The name of the variable for which an insertion of lookup has to be performed is called search argument.
•	Four structures:
o	Unordered Symbol Table.
o	Ordered Symbol Table
o	Tree structured symbol table
o	Hash symbol table.


Q5.	What is the peephole optimization? Explain with example 

Peephole Optimization
This optimization technique works locally on the source code to transform it into an optimized code. By locally, we mean a small portion of the code block at hand. These methods can be applied on intermediate codes as well as on target codes. A bunch of statements is analyzed and are checked for the following possible optimization:
Redundant instruction elimination
At source code level, the following can be done by the user:
